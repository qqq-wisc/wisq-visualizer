import React, { useEffect, useRef, useState } from "react";
import { MappingAndRouting, MRFile } from "../types/MappingAndRouting";

interface LayoutSelectorProperties {
  onUpload: (mappingAndRouting: MappingAndRouting) => void;
  setLoading: (loading: boolean) => void;
  setError: (error: Error | null) => void;
  uploadedFiles: { [key: string]: MRFile };
  layoutName: string;
  onLayoutNameChange: (newName: string) => void;
}

const LayoutSelector: React.FC<LayoutSelectorProperties> = ({
  onUpload,
  setLoading,
  setError,
  uploadedFiles,
  layoutName,
  onLayoutNameChange,
}) => {
  /**
   * Presets are generated by:
   * wisq wisq-circuits/3_17_13.qasm -ap 1e-10 -ot 10
   * wisq wisq-circuits/continuous_3_17_13.qasm -ap 1e-10 -ot 10 --architecture compact_layout
   * wisq wisq-circuits/qft_20.qasm -ap 1e-10 -ot 10 --mode scmr
   */
  const presets: string[] = [
    "3_17_13",
    "continuous_3_17_13_compact",
    "qft_20_sparse",
  ];

  const [isOpen, setIsOpen] = useState<boolean>(false);
  const dropdownRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target as Node)
      ) {
        setIsOpen(false); // Close dropdown if clicked outside
      }
    };

    document.addEventListener("mousedown", handleClickOutside);

    // Cleanup the event listener on unmount
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  useEffect(() => {
    // see if the selected preset is in presets first
    if (presets.includes(layoutName)) {
      fetch(`/wisq-visualizer/${layoutName}.json`)
        .then((response) => {
          return response;
        })
        .then((response) => response.json() as Promise<MappingAndRouting>)
        .then((result) => {
          onUpload(result);
          setLoading(false);
          setError(null);
        })
        .catch((err) => {
          setError(err);
          setLoading(false);
        });
    } else {
      onUpload(uploadedFiles[layoutName].mappingAndRouting);
    }
  }, [layoutName]);

  return (
    <>
      <div className="flex flex-col">
        {/* Label for the cropdown */}
        <p className="w-full">Select a layout:</p>
        <div
          className="relative inline-block text-left w-full border-1 border-solid border-color-black rounded-md"
          ref={dropdownRef}
        >
          {/* Main button */}
          <button
            onClick={() => setIsOpen(!isOpen)}
            className="bg-gray-200 px-4 py-2 rounded-lg hover:bg-gray-400 
              focus:outline-none flex items-center w-full cursor-pointer"
          >
            <div className="flex-grow truncate">{layoutName}</div>
            <svg
              className="inline-block w-4 h-4 ml-2"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path d="M19 9l-7 7-7-7"></path>
            </svg>
          </button>

          {/* Dropdown Menu */}
          {isOpen && (
            <div
              className="absolute mt-2 bg-white border border-gray-300 rounded-lg shadow-lg z-10 min-w-max"
              ref={dropdownRef}
            >
              {[...presets, ...Object.keys(uploadedFiles)].map((option) => (
                <button
                  key={option}
                  onClick={() => {
                    setIsOpen(false);
                    onLayoutNameChange(option);
                  }}
                  className="block w-full text-left px-4 py-2 hover:bg-gray-100 cursor-pointer"
                >
                  {option}
                </button>
              ))}
            </div>
          )}
        </div>
      </div>
    </>
  );
};

export default LayoutSelector;
